'------------------------------------------------------------------------------
' <auto-generated>
'     Dieser Code wurde von einem Tool generiert.
'     Laufzeitversion:4.0.30319.42000
'
'     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
'     der Code erneut generiert wird.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Der Quellcode wurde automatisch mit Microsoft.VSDesigner generiert. Version 4.0.30319.42000.
'
Namespace SPCVLCategorizeService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="SemanticExtractionPortBinding", [Namespace]:="http://servlets.iex.jv.com/")>  _
    Partial Public Class SemanticExtractionService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private convertToPNGOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getContingentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getXMLDomainsForOperationCompleted As System.Threading.SendOrPostCallback
        
        Private extractToXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private extractToTemplateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private mergeToXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private categorizeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cutOutSingleOfferOperationCompleted As System.Threading.SendOrPostCallback
        
        Private testOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.SP.ApplicationMng.My.MySettings.Default.SP_ApplicationMng_SPCVLCategorizeService_SemanticExtractionService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event convertToPNGCompleted As convertToPNGCompletedEventHandler
        
        '''<remarks/>
        Public Event getContingentCompleted As getContingentCompletedEventHandler
        
        '''<remarks/>
        Public Event getXMLDomainsForCompleted As getXMLDomainsForCompletedEventHandler
        
        '''<remarks/>
        Public Event extractToXMLCompleted As extractToXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event extractToTemplateCompleted As extractToTemplateCompletedEventHandler
        
        '''<remarks/>
        Public Event mergeToXMLCompleted As mergeToXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event categorizeCompleted As categorizeCompletedEventHandler
        
        '''<remarks/>
        Public Event cutOutSingleOfferCompleted As cutOutSingleOfferCompletedEventHandler
        
        '''<remarks/>
        Public Event testCompleted As testCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://servlets.iex.jv.com/", ResponseNamespace:="http://servlets.iex.jv.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function convertToPNG(ByVal sourceFormat As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal sourceDocument() As Byte, ByVal page As Integer, ByVal imageWidth As Integer, ByVal dpi As Integer, ByVal maximumImageWidth As Integer, ByVal imageColorScheme As String, ByVal username As String, ByVal password As String) As <System.Xml.Serialization.XmlElementAttribute("return", DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("convertToPNG", New Object() {sourceFormat, sourceDocument, page, imageWidth, dpi, maximumImageWidth, imageColorScheme, username, password})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub convertToPNGAsync(ByVal sourceFormat As String, ByVal sourceDocument() As Byte, ByVal page As Integer, ByVal imageWidth As Integer, ByVal dpi As Integer, ByVal maximumImageWidth As Integer, ByVal imageColorScheme As String, ByVal username As String, ByVal password As String)
            Me.convertToPNGAsync(sourceFormat, sourceDocument, page, imageWidth, dpi, maximumImageWidth, imageColorScheme, username, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub convertToPNGAsync(ByVal sourceFormat As String, ByVal sourceDocument() As Byte, ByVal page As Integer, ByVal imageWidth As Integer, ByVal dpi As Integer, ByVal maximumImageWidth As Integer, ByVal imageColorScheme As String, ByVal username As String, ByVal password As String, ByVal userState As Object)
            If (Me.convertToPNGOperationCompleted Is Nothing) Then
                Me.convertToPNGOperationCompleted = AddressOf Me.OnconvertToPNGOperationCompleted
            End If
            Me.InvokeAsync("convertToPNG", New Object() {sourceFormat, sourceDocument, page, imageWidth, dpi, maximumImageWidth, imageColorScheme, username, password}, Me.convertToPNGOperationCompleted, userState)
        End Sub
        
        Private Sub OnconvertToPNGOperationCompleted(ByVal arg As Object)
            If (Not (Me.convertToPNGCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent convertToPNGCompleted(Me, New convertToPNGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://servlets.iex.jv.com/", ResponseNamespace:="http://servlets.iex.jv.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getContingent(ByVal username As String, ByVal password As String) As <System.Xml.Serialization.XmlElementAttribute("return")> Integer
            Dim results() As Object = Me.Invoke("getContingent", New Object() {username, password})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getContingentAsync(ByVal username As String, ByVal password As String)
            Me.getContingentAsync(username, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getContingentAsync(ByVal username As String, ByVal password As String, ByVal userState As Object)
            If (Me.getContingentOperationCompleted Is Nothing) Then
                Me.getContingentOperationCompleted = AddressOf Me.OngetContingentOperationCompleted
            End If
            Me.InvokeAsync("getContingent", New Object() {username, password}, Me.getContingentOperationCompleted, userState)
        End Sub
        
        Private Sub OngetContingentOperationCompleted(ByVal arg As Object)
            If (Not (Me.getContingentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getContingentCompleted(Me, New getContingentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://servlets.iex.jv.com/", ResponseNamespace:="http://servlets.iex.jv.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function getXMLDomainsFor(ByVal language As String) As <System.Xml.Serialization.XmlElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("getXMLDomainsFor", New Object() {language})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getXMLDomainsForAsync(ByVal language As String)
            Me.getXMLDomainsForAsync(language, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getXMLDomainsForAsync(ByVal language As String, ByVal userState As Object)
            If (Me.getXMLDomainsForOperationCompleted Is Nothing) Then
                Me.getXMLDomainsForOperationCompleted = AddressOf Me.OngetXMLDomainsForOperationCompleted
            End If
            Me.InvokeAsync("getXMLDomainsFor", New Object() {language}, Me.getXMLDomainsForOperationCompleted, userState)
        End Sub
        
        Private Sub OngetXMLDomainsForOperationCompleted(ByVal arg As Object)
            If (Not (Me.getXMLDomainsForCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getXMLDomainsForCompleted(Me, New getXMLDomainsForCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://servlets.iex.jv.com/", ResponseNamespace:="http://servlets.iex.jv.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function extractToXML(ByVal username As String, ByVal password As String, ByVal language As String, ByVal model As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal inputdata() As Byte, ByVal inputdatatype As String) As <System.Xml.Serialization.XmlElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("extractToXML", New Object() {username, password, language, model, inputdata, inputdatatype})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub extractToXMLAsync(ByVal username As String, ByVal password As String, ByVal language As String, ByVal model As String, ByVal inputdata() As Byte, ByVal inputdatatype As String)
            Me.extractToXMLAsync(username, password, language, model, inputdata, inputdatatype, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub extractToXMLAsync(ByVal username As String, ByVal password As String, ByVal language As String, ByVal model As String, ByVal inputdata() As Byte, ByVal inputdatatype As String, ByVal userState As Object)
            If (Me.extractToXMLOperationCompleted Is Nothing) Then
                Me.extractToXMLOperationCompleted = AddressOf Me.OnextractToXMLOperationCompleted
            End If
            Me.InvokeAsync("extractToXML", New Object() {username, password, language, model, inputdata, inputdatatype}, Me.extractToXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnextractToXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.extractToXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent extractToXMLCompleted(Me, New extractToXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://servlets.iex.jv.com/", ResponseNamespace:="http://servlets.iex.jv.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function extractToTemplate(ByVal username As String, ByVal password As String, ByVal language As String, ByVal model As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal inputdata() As Byte, ByVal inputdatatype As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal documenttemplate() As Byte) As <System.Xml.Serialization.XmlElementAttribute("return", DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("extractToTemplate", New Object() {username, password, language, model, inputdata, inputdatatype, documenttemplate})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub extractToTemplateAsync(ByVal username As String, ByVal password As String, ByVal language As String, ByVal model As String, ByVal inputdata() As Byte, ByVal inputdatatype As String, ByVal documenttemplate() As Byte)
            Me.extractToTemplateAsync(username, password, language, model, inputdata, inputdatatype, documenttemplate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub extractToTemplateAsync(ByVal username As String, ByVal password As String, ByVal language As String, ByVal model As String, ByVal inputdata() As Byte, ByVal inputdatatype As String, ByVal documenttemplate() As Byte, ByVal userState As Object)
            If (Me.extractToTemplateOperationCompleted Is Nothing) Then
                Me.extractToTemplateOperationCompleted = AddressOf Me.OnextractToTemplateOperationCompleted
            End If
            Me.InvokeAsync("extractToTemplate", New Object() {username, password, language, model, inputdata, inputdatatype, documenttemplate}, Me.extractToTemplateOperationCompleted, userState)
        End Sub
        
        Private Sub OnextractToTemplateOperationCompleted(ByVal arg As Object)
            If (Not (Me.extractToTemplateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent extractToTemplateCompleted(Me, New extractToTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://servlets.iex.jv.com/", ResponseNamespace:="http://servlets.iex.jv.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function mergeToXML(ByVal username As String, ByVal password As String, ByVal language As String, ByVal model As String, <System.Xml.Serialization.XmlArrayItemAttribute("item", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal inputDocument() As inputDoc) As <System.Xml.Serialization.XmlElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("mergeToXML", New Object() {username, password, language, model, inputDocument})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub mergeToXMLAsync(ByVal username As String, ByVal password As String, ByVal language As String, ByVal model As String, ByVal inputDocument() As inputDoc)
            Me.mergeToXMLAsync(username, password, language, model, inputDocument, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub mergeToXMLAsync(ByVal username As String, ByVal password As String, ByVal language As String, ByVal model As String, ByVal inputDocument() As inputDoc, ByVal userState As Object)
            If (Me.mergeToXMLOperationCompleted Is Nothing) Then
                Me.mergeToXMLOperationCompleted = AddressOf Me.OnmergeToXMLOperationCompleted
            End If
            Me.InvokeAsync("mergeToXML", New Object() {username, password, language, model, inputDocument}, Me.mergeToXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnmergeToXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.mergeToXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent mergeToXMLCompleted(Me, New mergeToXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://servlets.iex.jv.com/", ResponseNamespace:="http://servlets.iex.jv.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function categorize(<System.Xml.Serialization.XmlArrayItemAttribute("item", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal inputDocument() As inputDoc, ByVal domain As String, ByVal username As String, ByVal password As String) As <System.Xml.Serialization.XmlArrayAttribute("return"), System.Xml.Serialization.XmlArrayItemAttribute("item", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> outputDoc()
            Dim results() As Object = Me.Invoke("categorize", New Object() {inputDocument, domain, username, password})
            Return CType(results(0),outputDoc())
        End Function
        
        '''<remarks/>
        Public Overloads Sub categorizeAsync(ByVal inputDocument() As inputDoc, ByVal domain As String, ByVal username As String, ByVal password As String)
            Me.categorizeAsync(inputDocument, domain, username, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub categorizeAsync(ByVal inputDocument() As inputDoc, ByVal domain As String, ByVal username As String, ByVal password As String, ByVal userState As Object)
            If (Me.categorizeOperationCompleted Is Nothing) Then
                Me.categorizeOperationCompleted = AddressOf Me.OncategorizeOperationCompleted
            End If
            Me.InvokeAsync("categorize", New Object() {inputDocument, domain, username, password}, Me.categorizeOperationCompleted, userState)
        End Sub
        
        Private Sub OncategorizeOperationCompleted(ByVal arg As Object)
            If (Not (Me.categorizeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent categorizeCompleted(Me, New categorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://servlets.iex.jv.com/", ResponseNamespace:="http://servlets.iex.jv.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function cutOutSingleOffer(ByVal username As String, ByVal password As String, ByVal url As String) As <System.Xml.Serialization.XmlElementAttribute("return", DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("cutOutSingleOffer", New Object() {username, password, url})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub cutOutSingleOfferAsync(ByVal username As String, ByVal password As String, ByVal url As String)
            Me.cutOutSingleOfferAsync(username, password, url, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cutOutSingleOfferAsync(ByVal username As String, ByVal password As String, ByVal url As String, ByVal userState As Object)
            If (Me.cutOutSingleOfferOperationCompleted Is Nothing) Then
                Me.cutOutSingleOfferOperationCompleted = AddressOf Me.OncutOutSingleOfferOperationCompleted
            End If
            Me.InvokeAsync("cutOutSingleOffer", New Object() {username, password, url}, Me.cutOutSingleOfferOperationCompleted, userState)
        End Sub
        
        Private Sub OncutOutSingleOfferOperationCompleted(ByVal arg As Object)
            If (Not (Me.cutOutSingleOfferCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cutOutSingleOfferCompleted(Me, New cutOutSingleOfferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace:="http://servlets.iex.jv.com/", ResponseNamespace:="http://servlets.iex.jv.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal)>  _
        Public Function test() As <System.Xml.Serialization.XmlElementAttribute("return")> Boolean
            Dim results() As Object = Me.Invoke("test", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub testAsync()
            Me.testAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub testAsync(ByVal userState As Object)
            If (Me.testOperationCompleted Is Nothing) Then
                Me.testOperationCompleted = AddressOf Me.OntestOperationCompleted
            End If
            Me.InvokeAsync("test", New Object(-1) {}, Me.testOperationCompleted, userState)
        End Sub
        
        Private Sub OntestOperationCompleted(ByVal arg As Object)
            If (Not (Me.testCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent testCompleted(Me, New testCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://servlets.iex.jv.com/")>  _
    Partial Public Class inputDoc
        
        Private dataField() As Byte
        
        Private filenameField As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary")>  _
        Public Property data() As Byte()
            Get
                Return Me.dataField
            End Get
            Set
                Me.dataField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property filename() As String
            Get
                Return Me.filenameField
            End Get
            Set
                Me.filenameField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://servlets.iex.jv.com/")>  _
    Partial Public Class outputDoc
        
        Private dataField() As Byte
        
        Private documentTypeField As String
        
        Private filenameField As String
        
        Private ocrField As Boolean
        
        Private pagesField As Integer
        
        Private plainTextField As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary")>  _
        Public Property data() As Byte()
            Get
                Return Me.dataField
            End Get
            Set
                Me.dataField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property documentType() As String
            Get
                Return Me.documentTypeField
            End Get
            Set
                Me.documentTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property filename() As String
            Get
                Return Me.filenameField
            End Get
            Set
                Me.filenameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property ocr() As Boolean
            Get
                Return Me.ocrField
            End Get
            Set
                Me.ocrField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property pages() As Integer
            Get
                Return Me.pagesField
            End Get
            Set
                Me.pagesField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property plainText() As String
            Get
                Return Me.plainTextField
            End Get
            Set
                Me.plainTextField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub convertToPNGCompletedEventHandler(ByVal sender As Object, ByVal e As convertToPNGCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class convertToPNGCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub getContingentCompletedEventHandler(ByVal sender As Object, ByVal e As getContingentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getContingentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub getXMLDomainsForCompletedEventHandler(ByVal sender As Object, ByVal e As getXMLDomainsForCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getXMLDomainsForCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub extractToXMLCompletedEventHandler(ByVal sender As Object, ByVal e As extractToXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class extractToXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub extractToTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As extractToTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class extractToTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub mergeToXMLCompletedEventHandler(ByVal sender As Object, ByVal e As mergeToXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class mergeToXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub categorizeCompletedEventHandler(ByVal sender As Object, ByVal e As categorizeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class categorizeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As outputDoc()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),outputDoc())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub cutOutSingleOfferCompletedEventHandler(ByVal sender As Object, ByVal e As cutOutSingleOfferCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class cutOutSingleOfferCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub testCompletedEventHandler(ByVal sender As Object, ByVal e As testCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class testCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
